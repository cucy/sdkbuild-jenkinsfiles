
// vim: ft=groovy et ts=4 sw=4 sts=4
// DO NOT EDIT: this file was generated from Jenkinsfile.erb

class Version {
    String gitVersion;

    int major;
    int minor;
    int patch;
    int commitCount;
    String commitSha1;

    Version(String gitVersion) {
        this.gitVersion = gitVersion.trim();
        parse()
    }

    @NonCPS
    void parse() {
        def res = (gitVersion =~ /^(\d+)\.(\d+)\.(\d+)(-(\d+)-g([0-9a-f]+))?$/)
        res.find()
        this.major = res.group(1) as Integer
        this.minor = res.group(2) as Integer
        this.patch = res.group(3) as Integer
        if (res.group(5)) {
            this.commitCount = res.group(5) as Integer
        }
        this.commitSha1 = res.group(6)
    }

    String version() {
        return "${major}.${minor}.${patch}"
    }

    String tar() {
        if (commitCount == null || commitCount == 0) {
            return version()
        }
        return gitVersion.replace("-", "_")
    }

    String tarName() {
        return "libcouchbase-${tar()}"
    }

    String rpmVer() {
        return version()
    }

    String rpmRel() {
        def rel = "1"
        if (commitCount) {
            rel = "${commitCount + 1}.git${commitSha1}"

        }
        return rel
    }

    String srpmGlob() {
        return "libcouchbase-${version()}-${rpmRel()}*.src.rpm"
    }

    String[] rpm() {
        return [version(), rpmRel()]
    }

    String deb() {
        def ver = version()
        if (commitCount) {
            ver += "+r${commitCount}git${commitSha1}"
        }
        return ver
    }
}

def VERSION = new Version('0.0.0')

class DynamicCluster {
    String id = null;
    String connstr = null;

    boolean isAllocated() {
        return !(id == null || id == "")
    }

    String inspect() {
        return "Cluster(id: ${id}, connstr: ${connstr})"
    }
}

def CLUSTER = new DynamicCluster()

pipeline {
    agent none
    stages {
        stage('prepare and validate') {
            agent { label 'centos7||centos6' }
            steps {
                cleanWs()
                script {
                    if (IS_GERRIT_TRIGGER.toBoolean()) {
                        currentBuild.displayName = "cv-${BUILD_NUMBER}"
                    } else {
                        currentBuild.displayName = "full-${BUILD_NUMBER}"
                    }
                }

                dir('libcouchbase') {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                    script {
                        VERSION = new Version(sh(script: 'git describe --long --abbrev=10', returnStdout: true))
                        echo "Building ${VERSION.gitVersion}, gerrit: ${IS_GERRIT_TRIGGER}, release: ${IS_RELEASE}"
                    }
                }

                stash includes: 'libcouchbase/', name: 'libcouchbase', useDefaultExcludes: false

                dir('libcouchbase') {
                    dir('build') {
                        sh('cmake -DLCB_NO_PLUGINS=1 -DLCB_NO_TESTS=1 -DLCB_NO_MOCK=1 ..')
                        sh('make dist')
                        archiveArtifacts(artifacts: "${VERSION.tarName()}.tar.gz", fingerprint: true)
                        stash includes: "${VERSION.tarName()}.tar.gz", name: 'tarball', useDefaultExcludes: false
                    }
                }
            }
        }

        stage('build and test') {
            parallel {
                stage('centos7 x64') {
                    agent { label 'centos7' }
                    stages {
                        stage('build') {
                            post {
                                failure {
                                    sh('tar cf failure-ws_centos7_x64.tar ws_centos7_x64')
                                    archiveArtifacts(artifacts: "failure-ws_centos7_x64.tar", fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_centos7_x64') {
                                    deleteDir()
                                    unstash 'libcouchbase'
                                    dir('build') {
                                        sh('cmake --parallel=2 -DCMAKE_BUILD_TYPE=DEBUG ../libcouchbase')
                                        sh('make -j8 VERBOSE=1')
                                        sh('make -j8 VERBOSE=1 alltests')
                                    }
                                }
                                stash includes: 'ws_centos7_x64/', name: 'centos_build', useDefaultExcludes: false
                            }
                        }
                        stage('test') {
                            post {
                                failure {
                                    sh('tar cf failure-ws_centos7_x64.tar ws_centos7_x64')
                                    archiveArtifacts(artifacts: "failure-ws_centos7_x64.tar", fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_centos7_x64/build') {
                                    sh('ctest -V -vv')
                                }
                            }
                        }
                    }
                }

            }
        }



        stage('integration test') {
            agent { label 'sdk-integration-test-linux' }
            when {
                expression {
                    return IS_GERRIT_TRIGGER.toBoolean() == false
                }
            }
            post {
                always {
                    script {
                        if (CLUSTER.isAllocated()) {
                            sh("cbdyncluster rm ${CLUSTER.id}")
                        }
                    }
                }
            }
            stages {
                stage('start') {
                    steps {
                        sh("cbdyncluster ps -a")
                        script {
                            CLUSTER.id = sh(script: "cbdyncluster allocate --num-nodes=2 --server-version=${CB_SERVER_VERSION}", returnStdout: true).trim()
                            CLUSTER.connstr = sh(script: "cbdyncluster connstr ${CLUSTER.id}", returnStdout: true).trim()
                        }
                        echo "Allocated ${CLUSTER.inspect()}"
                        sh("cbdyncluster setup ${CLUSTER.id} --node=kv,index,n1ql --node=kv,index,n1ql --bucket=default")
                    }
                }
                stage('test') {
                    post {
                        failure {
                            sh('tar cf failure-ws_centos7_x64.tar ws_centos7_x64')
                            archiveArtifacts(artifacts: "failure-ws_centos7_x64.tar", fingerprint: false)
                        }
                    }
                    environment {
                        LCB_TEST_CLUSTER_CONF="${CLUSTER.connstr.replaceAll(',', ';')},default,Administrator,password"
                    }
                    steps {
                        unstash('centos_build')
                        dir('ws_centos7_x64/build') {
                            sleep(20)
                            sh('ctest -V -vv')
                        }
                    }
                }
            }
        }
    }
}
