// vim: ft=groovy et ts=4 sw=4 sts=4

def PLATFORMS = [ "cowbuilder", "mock", "windows" ]
def DEFAULT_PLATFORM = PLATFORMS[0]

class Version {
    String gitVersion;

    int major;
    int minor;
    int patch;
    int commitCount;
    String commitSha1;

    Version(String gitVersion) {
        this.gitVersion = gitVersion.trim();
        parse()
    }

    @NonCPS
    void parse() {
        def res = (gitVersion =~ /^(\d+)\.(\d+)\.(\d+)(-(\d+)-g([0-9a-f]+))?$/)
        res.find()
        this.major = res.group(1) as Integer
        this.minor = res.group(2) as Integer
        this.patch = res.group(3) as Integer
        if (res.group(5)) {
            this.commitCount = res.group(5) as Integer
        }
        this.commitSha1 = res.group(6)
    }

    String version() {
        return "${major}.${minor}.${patch}"
    }

    String tar() {
        if (commitCount == null || commitCount == 0) {
            return version()
        }
        return gitVersion.replace("-", "_")
    }

    String tarName() {
        return "libcouchbase-${tar()}"
    }

    String rpmVer() {
        return version()
    }

    String rpmRel() {
        def rel = "1"
        if (commitCount) {
            rel = "${commitCount + 1}.git${commitSha1}"

        }
        return rel
    }

    String srpmGlob() {
        return "libcouchbase-${version()}-${rpmRel()}*.src.rpm"
    }

    String[] rpm() {
        return [version(), rpmRel()]
    }

    String deb() {
        def ver = version()
        if (commitCount) {
            ver += "+r${commitCount}git${commitSha1}"
        }
        return ver
    }
}

String shWithEcho(String command) {
    def output = sh(script: command, returnStdout: true)
    echo output
    return output
}

String batWithEcho(String command) {
    def output = bat(script: command, returnStdout: true)
    echo output
    return output
}

def VERSION = new Version("0.0.0");

pipeline {
    agent none
    stages {
        stage('job valid?') {
            when {
                expression {
                    return _INTERNAL_OK_.toBoolean() != true
                }
            }
            steps {
                error("Exiting early as not valid run")
            }
        }
        stage('prepare and validate') {
            agent { label "centos7||centos6" }
            steps {
                cleanWs()
                shWithEcho("env")

                dir("libcouchbase") {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                    script {
                        if (env.IS_RELEASE == true) {
                            echo "This is release, not updating metadata"
                        } else {
                            echo "This is not release, updating metadata"
                        }
                        VERSION = new Version(shWithEcho('git describe --long --abbrev=10'))
                    }
                }

                stash includes: 'libcouchbase/', name: 'libcouchbase', useDefaultExcludes: false
            }
        }
        stage('build-and-test') {
            agent { label 'master' }
            steps {
                cleanWs()
                buildsAndTests(PLATFORMS, VERSION)
            }
        }
    }
}

def buildsAndTests(PLATFORMS, VERSION) {
    def pairs = [:]
    for (j in PLATFORMS) {
        def platform = j

        if (platform == "windows") {
            def dists = [
                [2012, 11, 'amd64'],
                [2012, 11, 'x86'],
                [2015, 14, 'amd64'],
                [2015, 14, 'x86'],
                [2017, 15, 'amd64'],
                [2017, 15, 'x86'],
            ]
            for (d in dists) {
                def (msvs_ver, msvcc_ver, arch) = d
                pairs[platform + "-" + arch + "-" + msvcc_ver]= {
                    node("msvc-${msvs_ver}") {
                        dir("ws_${platform}_${arch}_${msvcc_ver}") {
                            deleteDir()
                            stage("build ${platform}_${arch}_${msvcc_ver}") {
                                unstash 'libcouchbase'
                                def cmdgen = "Visual Studio ${msvcc_ver} ${msvs_ver}"
                                if (arch == "amd64") {
                                    cmdgen += " Win64"
                                }
                                dir("build") {
                                    batWithEcho("""
                                    cmake -G"${cmdgen}" -DLCB_NO_MOCK=1 -DLCB_NO_SSL=1 ..\\libcouchbase
                                    cmake --build .
                                    """)
                                    batWithEcho("""
                                    cmake --build . --target alltests
                                    ctest -C debug
                                    """)
                                }
                            }
                            stage("package ${platform}_${arch}_${msvcc_ver}") {
                                //when {
                                //    expression {
                                //        return IS_GERRIT_TRIGGER.toBoolean() == false
                                //    }
                                //}
                                dir("build") {
                                    batWithEcho('cmake --build . --target package')
                                    batWithEcho('dir')
                                    batWithEcho("dir ${VERSION.tarName()}_vc${msvcc_ver}_${arch}.zip")
                                    archiveArtifacts(artifacts: "${VERSION.tarName()}_vc${msvcc_ver}_${arch}.zip", fingerprint: true)
                                }
                            }
                        }
                    }
                }
            }
        } else {
        //  pairs[platform]= {
        //      node(platform) {
        //          def envStr = []
        //          withEnv(envStr) {
        //              stage("build ${platform}") {
        //                  cleanWs()
        //                  unstash 'libcouchbase'

        //                  shWithEcho("groups")
        //                  shWithEcho("groups `whoami`")

        //                  dir("libcouchbase") {
        //                      dir("build") {
        //                          shWithEcho("cmake -DLCB_NO_PLUGINS=1 -DLCB_NO_TESTS=1 ..")
        //                          shWithEcho("make dist")
        //                          archiveArtifacts(artifacts: "${VERSION.tarName()}.tar.gz", fingerprint: true)
        //                      }
        //                  }
        //                  println platform
        //                  if (platform == "mock") {
        //                      dir("libcouchbase") {
        //                          dir("build") {
        //                              shWithEcho("""
        //                              sed 's/@VERSION@/${VERSION.rpmVer()}/g;s/@RELEASE@/${VERSION.rpmRel()}/g;s/@TARREDAS@/${VERSION.tarName()}/g' \
        //                                   < ../packaging/rpm/libcouchbase.spec.in > libcouchbase.spec
        //                              """)
        //                              shWithEcho("""
        //                              rpmbuild -bs --nodeps \
        //                                       --define "_source_filedigest_algorithm md5" \
        //                                       --define "_binary_filedigest_algorithm md5" \
        //                                       --define "_topdir ${pwd()}" \
        //                                       --define "_sourcedir ${pwd()}" \
        //                                       --define "_srcrpmdir ${pwd()}" libcouchbase.spec
        //                              """)

        //                              def srpmPath = findFiles(glob: VERSION.srpmGlob())[0].path
        //                              def dists = [
        //                                  [7, 'x86_64'],
        //                                  [6, 'i386'],
        //                                  [6, 'x86_64'],
        //                              ]
        //                              for (d in dists) {
        //                                  def (relno, arch) = d
        //                                  stage("centos${relno}_${arch}") {
        //                                      def resPath = "libcouchbase-${VERSION.tar()}_centos${relno}_${arch}"
        //                                      shWithEcho("""
        //                                      sudo mock --old-chroot -r epel-${relno}-${arch} --rebuild --resultdir="${resPath}" ${srpmPath} \
        //                                      || (for log in ${resPath}/*.log; do echo "ERROR LOG: \$log"; cat \$log; done; exit 1)
        //                                      """)
        //                                      shWithEcho("sudo chown couchbase:couchbase -R ${resPath}")
        //                                      for (log in ['state.log', 'build.log', 'root.log']) {
        //                                          if (fileExists("${resPath}/${log}")) {
        //                                              shWithEcho("rm -v ${resPath}/${log}")
        //                                          }
        //                                      }
        //                                      shWithEcho("tar cvf ${resPath}.tar ${resPath}")
        //                                      archiveArtifacts(artifacts: "${resPath}.tar", fingerprint: true)
        //                                  }
        //                              }
        //                          }
        //                      }
        //                  } else if (platform == "cowbuilder") {
        //                      stage("prepare debian sources") {
        //                          dir("libcouchbase") {
        //                              dir("build") {
        //                                  shWithEcho("ln -s ${VERSION.tarName()}.tar.gz libcouchbase_${VERSION.deb()}.orig.tar.gz")
        //                                  shWithEcho("tar -xf ${VERSION.tarName()}.tar.gz")
        //                                  shWithEcho("cp -a ../packaging/deb ${VERSION.tarName()}/debian")
        //                                  dir(VERSION.tarName()) {
        //                                      shWithEcho("""
        //                                      dch --no-auto-nmu --package libcouchbase --newversion ${VERSION.deb()}-1 \
        //                                          --create "Release package for libcouchbase ${VERSION.deb()}-1"
        //                                      """)
        //                                      shWithEcho("dpkg-buildpackage -rfakeroot -d -S -sa")
        //                                  }
        //                              }
        //                          }
        //                      }
        //                      def dists = [
        //                          ['trusty', 'amd64', 'ubuntu1404'],
        //                          ['trusty', 'i386', 'ubuntu1404'],
        //                          ['xenial', 'amd64', 'ubuntu1604'],
        //                          ['xenial', 'i386', 'ubuntu1604'],
        //                          ['bionic', 'amd64', 'ubuntu1804'],
        //                          ['bionic', 'i386', 'ubuntu1804'],
        //                          ['jessie', 'amd64', 'debian8'],
        //                          ['jessie', 'i386', 'debian8'],
        //                          ['stretch', 'amd64', 'debian9'],
        //                          ['stretch', 'i386', 'debian9'],
        //                      ]
        //                      for (d in dists) {
        //                          dir("libcouchbase") {
        //                              dir("build") {
        //                                  def (codename, arch, name) = d
        //                                  if (fileExists("/var/cache/pbuilder/${codename}-${arch}.cow/etc/os-release")) {
        //                                      stage("${codename}_${arch}: update cow") {
        //                                          shWithEcho("""
        //                                          sudo cowbuilder --update \
        //                                              --basepath /var/cache/pbuilder/${codename}-${arch}.cow
        //                                          """)
        //                                      }
        //                                  } else {
        //                                      stage("${codename}_${arch}: create cow") {
        //                                          def extra = "--components 'main'"
        //                                          if (name.contains("ubuntu")) {
        //                                              extra = "--components 'main universe' --mirror http://ftp.ubuntu.com/ubuntu --debootstrapopts --keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg"
        //                                          }
        //                                          shWithEcho("""
        //                                          sudo cowbuilder --create \
        //                                              --basepath /var/cache/pbuilder/${codename}-${arch}.cow \
        //                                              --distribution ${codename} \
        //                                              --debootstrapopts --arch=${arch} \
        //                                              ${extra}
        //                                          """)
        //                                      }
        //                                  }
        //                                  stage("${codename}_${arch}: package") {
        //                                      def resPath = "libcouchbase-${VERSION.deb()}_${name}_${codename}_${arch}"
        //                                      shWithEcho("""
        //                                          sudo cowbuilder --build \
        //                                              --basepath /var/cache/pbuilder/${codename}-${arch}.cow \
        //                                              --buildresult ${resPath} \
        //                                              --debbuildopts -j8 \
        //                                              --debbuildopts "-us -uc" \
        //                                              libcouchbase_${VERSION.deb()}-1.dsc
        //                                      """)
        //                                      shWithEcho("sudo chown couchbase:couchbase -R ${resPath}")
        //                                      shWithEcho("rm -rfv ${resPath}/libcouchbase_${VERSION.deb()}*")
        //                                      shWithEcho("tar cvf ${resPath}.tar ${resPath}")
        //                                      archiveArtifacts(artifacts: "${resPath}.tar", fingerprint: true)
        //                                  }
        //                              }
        //                          }
        //                      }
        //                  } else {
        //                      error("Platform not recognised for ${platform}")
        //                  }

        //                  stash includes: 'libcouchbase/', name: "libcouchbase-build-${platform}", useDefaultExcludes: false
        //              }
        //          }
        //      }
        //  }
        }
    }

    parallel pairs
}
